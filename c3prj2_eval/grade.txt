Grading at Thu Jul  4 12:27:01 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==192== Memcheck, a memory error detector
==192== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==192== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==192== Command: ./test-eval inp.1.txt
==192== Parent PID: 191
==192== 
==192== Use of uninitialised value of size 8
==192==    at 0x400C0D: print_hand (deck.c:8)
==192==    by 0x4022FB: describe_hand (test-eval.c:74)
==192==    by 0x4024DB: main (test-eval.c:116)
==192== 
==192== Invalid read of size 8
==192==    at 0x400C0D: print_hand (deck.c:8)
==192==    by 0x4022FB: describe_hand (test-eval.c:74)
==192==    by 0x4024DB: main (test-eval.c:116)
==192==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==192== 
==192== 
==192== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==192==  Access not within mapped region at address 0x0
==192==    at 0x400C0D: print_hand (deck.c:8)
==192==    by 0x4022FB: describe_hand (test-eval.c:74)
==192==    by 0x4024DB: main (test-eval.c:116)
==192==  If you believe this happened as a result of a stack
==192==  overflow in your program's main thread (unlikely but
==192==  possible), you can try to increase the size of the
==192==  main thread stack using the --main-stacksize= flag.
==192==  The main thread stack size used in this run was 8388608.
==192== 
==192== HEAP SUMMARY:
==192==     in use at exit: 896 bytes in 18 blocks
==192==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==192== 
==192== LEAK SUMMARY:
==192==    definitely lost: 0 bytes in 0 blocks
==192==    indirectly lost: 0 bytes in 0 blocks
==192==      possibly lost: 0 bytes in 0 blocks
==192==    still reachable: 896 bytes in 18 blocks
==192==         suppressed: 0 bytes in 0 blocks
==192== Rerun with --leak-check=full to see details of leaked memory
==192== 
==192== For counts of detected and suppressed errors, rerun with: -v
==192== Use --track-origins=yes to see where uninitialised values come from
==192== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==197== Memcheck, a memory error detector
==197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==197== Command: ./test-eval inp.2.txt
==197== Parent PID: 196
==197== 
==197== Use of uninitialised value of size 8
==197==    at 0x400C0D: print_hand (deck.c:8)
==197==    by 0x4022FB: describe_hand (test-eval.c:74)
==197==    by 0x4024DB: main (test-eval.c:116)
==197== 
==197== Invalid read of size 8
==197==    at 0x400C0D: print_hand (deck.c:8)
==197==    by 0x4022FB: describe_hand (test-eval.c:74)
==197==    by 0x4024DB: main (test-eval.c:116)
==197==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==197== 
==197== 
==197== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==197==  Access not within mapped region at address 0x0
==197==    at 0x400C0D: print_hand (deck.c:8)
==197==    by 0x4022FB: describe_hand (test-eval.c:74)
==197==    by 0x4024DB: main (test-eval.c:116)
==197==  If you believe this happened as a result of a stack
==197==  overflow in your program's main thread (unlikely but
==197==  possible), you can try to increase the size of the
==197==  main thread stack using the --main-stacksize= flag.
==197==  The main thread stack size used in this run was 8388608.
==197== 
==197== HEAP SUMMARY:
==197==     in use at exit: 880 bytes in 17 blocks
==197==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==197== 
==197== LEAK SUMMARY:
==197==    definitely lost: 0 bytes in 0 blocks
==197==    indirectly lost: 0 bytes in 0 blocks
==197==      possibly lost: 0 bytes in 0 blocks
==197==    still reachable: 880 bytes in 17 blocks
==197==         suppressed: 0 bytes in 0 blocks
==197== Rerun with --leak-check=full to see details of leaked memory
==197== 
==197== For counts of detected and suppressed errors, rerun with: -v
==197== Use --track-origins=yes to see where uninitialised values come from
==197== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==202== Memcheck, a memory error detector
==202== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==202== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==202== Command: ./test-eval inp.3.txt
==202== Parent PID: 201
==202== 
==202== Use of uninitialised value of size 8
==202==    at 0x400C0D: print_hand (deck.c:8)
==202==    by 0x4022FB: describe_hand (test-eval.c:74)
==202==    by 0x4024DB: main (test-eval.c:116)
==202== 
==202== Invalid read of size 8
==202==    at 0x400C0D: print_hand (deck.c:8)
==202==    by 0x4022FB: describe_hand (test-eval.c:74)
==202==    by 0x4024DB: main (test-eval.c:116)
==202==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==202== 
==202== 
==202== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==202==  Access not within mapped region at address 0x0
==202==    at 0x400C0D: print_hand (deck.c:8)
==202==    by 0x4022FB: describe_hand (test-eval.c:74)
==202==    by 0x4024DB: main (test-eval.c:116)
==202==  If you believe this happened as a result of a stack
==202==  overflow in your program's main thread (unlikely but
==202==  possible), you can try to increase the size of the
==202==  main thread stack using the --main-stacksize= flag.
==202==  The main thread stack size used in this run was 8388608.
==202== 
==202== HEAP SUMMARY:
==202==     in use at exit: 864 bytes in 16 blocks
==202==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==202== 
==202== LEAK SUMMARY:
==202==    definitely lost: 0 bytes in 0 blocks
==202==    indirectly lost: 0 bytes in 0 blocks
==202==      possibly lost: 0 bytes in 0 blocks
==202==    still reachable: 864 bytes in 16 blocks
==202==         suppressed: 0 bytes in 0 blocks
==202== Rerun with --leak-check=full to see details of leaked memory
==202== 
==202== For counts of detected and suppressed errors, rerun with: -v
==202== Use --track-origins=yes to see where uninitialised values come from
==202== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==207== Memcheck, a memory error detector
==207== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==207== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==207== Command: ./test-eval inp.4.txt
==207== Parent PID: 206
==207== 
==207== Use of uninitialised value of size 8
==207==    at 0x400C0D: print_hand (deck.c:8)
==207==    by 0x4022FB: describe_hand (test-eval.c:74)
==207==    by 0x4024DB: main (test-eval.c:116)
==207== 
==207== Invalid read of size 8
==207==    at 0x400C0D: print_hand (deck.c:8)
==207==    by 0x4022FB: describe_hand (test-eval.c:74)
==207==    by 0x4024DB: main (test-eval.c:116)
==207==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==207== 
==207== 
==207== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==207==  Access not within mapped region at address 0x0
==207==    at 0x400C0D: print_hand (deck.c:8)
==207==    by 0x4022FB: describe_hand (test-eval.c:74)
==207==    by 0x4024DB: main (test-eval.c:116)
==207==  If you believe this happened as a result of a stack
==207==  overflow in your program's main thread (unlikely but
==207==  possible), you can try to increase the size of the
==207==  main thread stack using the --main-stacksize= flag.
==207==  The main thread stack size used in this run was 8388608.
==207== 
==207== HEAP SUMMARY:
==207==     in use at exit: 896 bytes in 18 blocks
==207==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==207== 
==207== LEAK SUMMARY:
==207==    definitely lost: 0 bytes in 0 blocks
==207==    indirectly lost: 0 bytes in 0 blocks
==207==      possibly lost: 0 bytes in 0 blocks
==207==    still reachable: 896 bytes in 18 blocks
==207==         suppressed: 0 bytes in 0 blocks
==207== Rerun with --leak-check=full to see details of leaked memory
==207== 
==207== For counts of detected and suppressed errors, rerun with: -v
==207== Use --track-origins=yes to see where uninitialised values come from
==207== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==212== Memcheck, a memory error detector
==212== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==212== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==212== Command: ./test-eval inp.5.txt
==212== Parent PID: 211
==212== 
==212== Use of uninitialised value of size 8
==212==    at 0x400C0D: print_hand (deck.c:8)
==212==    by 0x4022FB: describe_hand (test-eval.c:74)
==212==    by 0x4024DB: main (test-eval.c:116)
==212== 
==212== Invalid read of size 8
==212==    at 0x400C0D: print_hand (deck.c:8)
==212==    by 0x4022FB: describe_hand (test-eval.c:74)
==212==    by 0x4024DB: main (test-eval.c:116)
==212==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==212== 
==212== 
==212== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==212==  Access not within mapped region at address 0x0
==212==    at 0x400C0D: print_hand (deck.c:8)
==212==    by 0x4022FB: describe_hand (test-eval.c:74)
==212==    by 0x4024DB: main (test-eval.c:116)
==212==  If you believe this happened as a result of a stack
==212==  overflow in your program's main thread (unlikely but
==212==  possible), you can try to increase the size of the
==212==  main thread stack using the --main-stacksize= flag.
==212==  The main thread stack size used in this run was 8388608.
==212== 
==212== HEAP SUMMARY:
==212==     in use at exit: 864 bytes in 16 blocks
==212==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==212== 
==212== LEAK SUMMARY:
==212==    definitely lost: 0 bytes in 0 blocks
==212==    indirectly lost: 0 bytes in 0 blocks
==212==      possibly lost: 0 bytes in 0 blocks
==212==    still reachable: 864 bytes in 16 blocks
==212==         suppressed: 0 bytes in 0 blocks
==212== Rerun with --leak-check=full to see details of leaked memory
==212== 
==212== For counts of detected and suppressed errors, rerun with: -v
==212== Use --track-origins=yes to see where uninitialised values come from
==212== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==217== Memcheck, a memory error detector
==217== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==217== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==217== Command: ./test-eval inp.6.txt
==217== Parent PID: 216
==217== 
==217== Use of uninitialised value of size 8
==217==    at 0x400C0D: print_hand (deck.c:8)
==217==    by 0x4022FB: describe_hand (test-eval.c:74)
==217==    by 0x4024DB: main (test-eval.c:116)
==217== 
==217== Invalid read of size 8
==217==    at 0x400C0D: print_hand (deck.c:8)
==217==    by 0x4022FB: describe_hand (test-eval.c:74)
==217==    by 0x4024DB: main (test-eval.c:116)
==217==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==217== 
==217== 
==217== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==217==  Access not within mapped region at address 0x0
==217==    at 0x400C0D: print_hand (deck.c:8)
==217==    by 0x4022FB: describe_hand (test-eval.c:74)
==217==    by 0x4024DB: main (test-eval.c:116)
==217==  If you believe this happened as a result of a stack
==217==  overflow in your program's main thread (unlikely but
==217==  possible), you can try to increase the size of the
==217==  main thread stack using the --main-stacksize= flag.
==217==  The main thread stack size used in this run was 8388608.
==217== 
==217== HEAP SUMMARY:
==217==     in use at exit: 928 bytes in 20 blocks
==217==   total heap usage: 212 allocs, 192 frees, 12,856 bytes allocated
==217== 
==217== LEAK SUMMARY:
==217==    definitely lost: 0 bytes in 0 blocks
==217==    indirectly lost: 0 bytes in 0 blocks
==217==      possibly lost: 0 bytes in 0 blocks
==217==    still reachable: 928 bytes in 20 blocks
==217==         suppressed: 0 bytes in 0 blocks
==217== Rerun with --leak-check=full to see details of leaked memory
==217== 
==217== For counts of detected and suppressed errors, rerun with: -v
==217== Use --track-origins=yes to see where uninitialised values come from
==217== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==222== Memcheck, a memory error detector
==222== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==222== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==222== Command: ./test-eval inp.7.txt
==222== Parent PID: 221
==222== 
==222== Use of uninitialised value of size 8
==222==    at 0x400C0D: print_hand (deck.c:8)
==222==    by 0x4022FB: describe_hand (test-eval.c:74)
==222==    by 0x4024DB: main (test-eval.c:116)
==222== 
==222== Invalid read of size 8
==222==    at 0x400C0D: print_hand (deck.c:8)
==222==    by 0x4022FB: describe_hand (test-eval.c:74)
==222==    by 0x4024DB: main (test-eval.c:116)
==222==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==222== 
==222== 
==222== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==222==  Access not within mapped region at address 0x0
==222==    at 0x400C0D: print_hand (deck.c:8)
==222==    by 0x4022FB: describe_hand (test-eval.c:74)
==222==    by 0x4024DB: main (test-eval.c:116)
==222==  If you believe this happened as a result of a stack
==222==  overflow in your program's main thread (unlikely but
==222==  possible), you can try to increase the size of the
==222==  main thread stack using the --main-stacksize= flag.
==222==  The main thread stack size used in this run was 8388608.
==222== 
==222== HEAP SUMMARY:
==222==     in use at exit: 928 bytes in 20 blocks
==222==   total heap usage: 36 allocs, 16 frees, 9,512 bytes allocated
==222== 
==222== LEAK SUMMARY:
==222==    definitely lost: 0 bytes in 0 blocks
==222==    indirectly lost: 0 bytes in 0 blocks
==222==      possibly lost: 0 bytes in 0 blocks
==222==    still reachable: 928 bytes in 20 blocks
==222==         suppressed: 0 bytes in 0 blocks
==222== Rerun with --leak-check=full to see details of leaked memory
==222== 
==222== For counts of detected and suppressed errors, rerun with: -v
==222== Use --track-origins=yes to see where uninitialised values come from
==222== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==227== Memcheck, a memory error detector
==227== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==227== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==227== Command: ./test-eval inp.8.txt
==227== Parent PID: 226
==227== 
==227== Use of uninitialised value of size 8
==227==    at 0x4026D6: ranking_to_string (cards.c:23)
==227==    by 0x4022BA: describe_hand (test-eval.c:69)
==227==    by 0x4024DB: main (test-eval.c:116)
==227== 
==227== Invalid read of size 8
==227==    at 0x4026D6: ranking_to_string (cards.c:23)
==227==    by 0x4022BA: describe_hand (test-eval.c:69)
==227==    by 0x4024DB: main (test-eval.c:116)
==227==  Address 0x17f7004f30 is not stack'd, malloc'd or (recently) free'd
==227== 
==227== 
==227== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==227==  Access not within mapped region at address 0x17F7004F30
==227==    at 0x4026D6: ranking_to_string (cards.c:23)
==227==    by 0x4022BA: describe_hand (test-eval.c:69)
==227==    by 0x4024DB: main (test-eval.c:116)
==227==  If you believe this happened as a result of a stack
==227==  overflow in your program's main thread (unlikely but
==227==  possible), you can try to increase the size of the
==227==  main thread stack using the --main-stacksize= flag.
==227==  The main thread stack size used in this run was 8388608.
==227== 
==227== HEAP SUMMARY:
==227==     in use at exit: 896 bytes in 18 blocks
==227==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==227== 
==227== LEAK SUMMARY:
==227==    definitely lost: 0 bytes in 0 blocks
==227==    indirectly lost: 0 bytes in 0 blocks
==227==      possibly lost: 0 bytes in 0 blocks
==227==    still reachable: 896 bytes in 18 blocks
==227==         suppressed: 0 bytes in 0 blocks
==227== Rerun with --leak-check=full to see details of leaked memory
==227== 
==227== For counts of detected and suppressed errors, rerun with: -v
==227== Use --track-origins=yes to see where uninitialised values come from
==227== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==232== Memcheck, a memory error detector
==232== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==232== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==232== Command: ./test-eval inp.9.txt
==232== Parent PID: 231
==232== 
==232== Use of uninitialised value of size 8
==232==    at 0x400C0D: print_hand (deck.c:8)
==232==    by 0x4022FB: describe_hand (test-eval.c:74)
==232==    by 0x4024DB: main (test-eval.c:116)
==232== 
==232== Invalid read of size 8
==232==    at 0x400C0D: print_hand (deck.c:8)
==232==    by 0x4022FB: describe_hand (test-eval.c:74)
==232==    by 0x4024DB: main (test-eval.c:116)
==232==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==232== 
==232== 
==232== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==232==  Access not within mapped region at address 0x0
==232==    at 0x400C0D: print_hand (deck.c:8)
==232==    by 0x4022FB: describe_hand (test-eval.c:74)
==232==    by 0x4024DB: main (test-eval.c:116)
==232==  If you believe this happened as a result of a stack
==232==  overflow in your program's main thread (unlikely but
==232==  possible), you can try to increase the size of the
==232==  main thread stack using the --main-stacksize= flag.
==232==  The main thread stack size used in this run was 8388608.
==232== 
==232== HEAP SUMMARY:
==232==     in use at exit: 928 bytes in 20 blocks
==232==   total heap usage: 148 allocs, 128 frees, 11,592 bytes allocated
==232== 
==232== LEAK SUMMARY:
==232==    definitely lost: 0 bytes in 0 blocks
==232==    indirectly lost: 0 bytes in 0 blocks
==232==      possibly lost: 0 bytes in 0 blocks
==232==    still reachable: 928 bytes in 20 blocks
==232==         suppressed: 0 bytes in 0 blocks
==232== Rerun with --leak-check=full to see details of leaked memory
==232== 
==232== For counts of detected and suppressed errors, rerun with: -v
==232== Use --track-origins=yes to see where uninitialised values come from
==232== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==237== Memcheck, a memory error detector
==237== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==237== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==237== Command: ./test-eval inp.10.txt
==237== Parent PID: 236
==237== 
==237== Use of uninitialised value of size 8
==237==    at 0x4026D6: ranking_to_string (cards.c:23)
==237==    by 0x4022BA: describe_hand (test-eval.c:69)
==237==    by 0x4024FB: main (test-eval.c:119)
==237== 
==237== Invalid read of size 8
==237==    at 0x4026D6: ranking_to_string (cards.c:23)
==237==    by 0x4022BA: describe_hand (test-eval.c:69)
==237==    by 0x4024FB: main (test-eval.c:119)
==237==  Address 0x17f7004f30 is not stack'd, malloc'd or (recently) free'd
==237== 
==237== 
==237== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==237==  Access not within mapped region at address 0x17F7004F30
==237==    at 0x4026D6: ranking_to_string (cards.c:23)
==237==    by 0x4022BA: describe_hand (test-eval.c:69)
==237==    by 0x4024FB: main (test-eval.c:119)
==237==  If you believe this happened as a result of a stack
==237==  overflow in your program's main thread (unlikely but
==237==  possible), you can try to increase the size of the
==237==  main thread stack using the --main-stacksize= flag.
==237==  The main thread stack size used in this run was 8388608.
==237== 
==237== HEAP SUMMARY:
==237==     in use at exit: 896 bytes in 18 blocks
==237==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==237== 
==237== LEAK SUMMARY:
==237==    definitely lost: 0 bytes in 0 blocks
==237==    indirectly lost: 0 bytes in 0 blocks
==237==      possibly lost: 0 bytes in 0 blocks
==237==    still reachable: 896 bytes in 18 blocks
==237==         suppressed: 0 bytes in 0 blocks
==237== Rerun with --leak-check=full to see details of leaked memory
==237== 
==237== For counts of detected and suppressed errors, rerun with: -v
==237== Use --track-origins=yes to see where uninitialised values come from
==237== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
