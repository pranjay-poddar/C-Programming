Grading at Thu Jul  4 16:07:31 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==192== Memcheck, a memory error detector
==192== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==192== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==192== Command: ./test-eval inp.1.txt
==192== Parent PID: 191
==192== 
==192== Use of uninitialised value of size 8
==192==    at 0x400C0D: print_hand (deck.c:8)
==192==    by 0x4025CD: describe_hand (test-eval.c:74)
==192==    by 0x4027AD: main (test-eval.c:116)
==192== 
==192== Invalid read of size 8
==192==    at 0x400C0D: print_hand (deck.c:8)
==192==    by 0x4025CD: describe_hand (test-eval.c:74)
==192==    by 0x4027AD: main (test-eval.c:116)
==192==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==192== 
==192== 
==192== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==192==  Access not within mapped region at address 0x0
==192==    at 0x400C0D: print_hand (deck.c:8)
==192==    by 0x4025CD: describe_hand (test-eval.c:74)
==192==    by 0x4027AD: main (test-eval.c:116)
==192==  If you believe this happened as a result of a stack
==192==  overflow in your program's main thread (unlikely but
==192==  possible), you can try to increase the size of the
==192==  main thread stack using the --main-stacksize= flag.
==192==  The main thread stack size used in this run was 8388608.
==192== 
==192== HEAP SUMMARY:
==192==     in use at exit: 896 bytes in 18 blocks
==192==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==192== 
==192== LEAK SUMMARY:
==192==    definitely lost: 0 bytes in 0 blocks
==192==    indirectly lost: 0 bytes in 0 blocks
==192==      possibly lost: 0 bytes in 0 blocks
==192==    still reachable: 896 bytes in 18 blocks
==192==         suppressed: 0 bytes in 0 blocks
==192== Rerun with --leak-check=full to see details of leaked memory
==192== 
==192== For counts of detected and suppressed errors, rerun with: -v
==192== Use --track-origins=yes to see where uninitialised values come from
==192== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==197== Memcheck, a memory error detector
==197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==197== Command: ./test-eval inp.2.txt
==197== Parent PID: 196
==197== 
==197== Use of uninitialised value of size 8
==197==    at 0x400C0D: print_hand (deck.c:8)
==197==    by 0x4025CD: describe_hand (test-eval.c:74)
==197==    by 0x4027AD: main (test-eval.c:116)
==197== 
==197== Invalid read of size 8
==197==    at 0x400C0D: print_hand (deck.c:8)
==197==    by 0x4025CD: describe_hand (test-eval.c:74)
==197==    by 0x4027AD: main (test-eval.c:116)
==197==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==197== 
==197== 
==197== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==197==  Access not within mapped region at address 0x0
==197==    at 0x400C0D: print_hand (deck.c:8)
==197==    by 0x4025CD: describe_hand (test-eval.c:74)
==197==    by 0x4027AD: main (test-eval.c:116)
==197==  If you believe this happened as a result of a stack
==197==  overflow in your program's main thread (unlikely but
==197==  possible), you can try to increase the size of the
==197==  main thread stack using the --main-stacksize= flag.
==197==  The main thread stack size used in this run was 8388608.
==197== 
==197== HEAP SUMMARY:
==197==     in use at exit: 880 bytes in 17 blocks
==197==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==197== 
==197== LEAK SUMMARY:
==197==    definitely lost: 0 bytes in 0 blocks
==197==    indirectly lost: 0 bytes in 0 blocks
==197==      possibly lost: 0 bytes in 0 blocks
==197==    still reachable: 880 bytes in 17 blocks
==197==         suppressed: 0 bytes in 0 blocks
==197== Rerun with --leak-check=full to see details of leaked memory
==197== 
==197== For counts of detected and suppressed errors, rerun with: -v
==197== Use --track-origins=yes to see where uninitialised values come from
==197== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==202== Memcheck, a memory error detector
==202== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==202== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==202== Command: ./test-eval inp.3.txt
==202== Parent PID: 201
==202== 
==202== Use of uninitialised value of size 8
==202==    at 0x400C0D: print_hand (deck.c:8)
==202==    by 0x4025CD: describe_hand (test-eval.c:74)
==202==    by 0x4027AD: main (test-eval.c:116)
==202== 
==202== Invalid read of size 8
==202==    at 0x400C0D: print_hand (deck.c:8)
==202==    by 0x4025CD: describe_hand (test-eval.c:74)
==202==    by 0x4027AD: main (test-eval.c:116)
==202==  Address 0x380512a0 is in the Text segment of /usr/lib/valgrind/memcheck-amd64-linux
==202==    at 0x380512A0: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==202== 
==202== 
==202== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==202==  Access not within mapped region at address 0x30000000D
==202==    at 0x400C0D: print_hand (deck.c:8)
==202==    by 0x4025CD: describe_hand (test-eval.c:74)
==202==    by 0x4027AD: main (test-eval.c:116)
==202==  If you believe this happened as a result of a stack
==202==  overflow in your program's main thread (unlikely but
==202==  possible), you can try to increase the size of the
==202==  main thread stack using the --main-stacksize= flag.
==202==  The main thread stack size used in this run was 8388608.
==202== 
==202== HEAP SUMMARY:
==202==     in use at exit: 864 bytes in 16 blocks
==202==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==202== 
==202== LEAK SUMMARY:
==202==    definitely lost: 0 bytes in 0 blocks
==202==    indirectly lost: 0 bytes in 0 blocks
==202==      possibly lost: 0 bytes in 0 blocks
==202==    still reachable: 864 bytes in 16 blocks
==202==         suppressed: 0 bytes in 0 blocks
==202== Rerun with --leak-check=full to see details of leaked memory
==202== 
==202== For counts of detected and suppressed errors, rerun with: -v
==202== Use --track-origins=yes to see where uninitialised values come from
==202== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==207== Memcheck, a memory error detector
==207== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==207== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==207== Command: ./test-eval inp.4.txt
==207== Parent PID: 206
==207== 
==207== Use of uninitialised value of size 8
==207==    at 0x400C0D: print_hand (deck.c:8)
==207==    by 0x4025CD: describe_hand (test-eval.c:74)
==207==    by 0x4027AD: main (test-eval.c:116)
==207== 
==207== Invalid read of size 8
==207==    at 0x400C0D: print_hand (deck.c:8)
==207==    by 0x4025CD: describe_hand (test-eval.c:74)
==207==    by 0x4027AD: main (test-eval.c:116)
==207==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==207== 
==207== 
==207== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==207==  Access not within mapped region at address 0x0
==207==    at 0x400C0D: print_hand (deck.c:8)
==207==    by 0x4025CD: describe_hand (test-eval.c:74)
==207==    by 0x4027AD: main (test-eval.c:116)
==207==  If you believe this happened as a result of a stack
==207==  overflow in your program's main thread (unlikely but
==207==  possible), you can try to increase the size of the
==207==  main thread stack using the --main-stacksize= flag.
==207==  The main thread stack size used in this run was 8388608.
==207== 
==207== HEAP SUMMARY:
==207==     in use at exit: 896 bytes in 18 blocks
==207==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==207== 
==207== LEAK SUMMARY:
==207==    definitely lost: 0 bytes in 0 blocks
==207==    indirectly lost: 0 bytes in 0 blocks
==207==      possibly lost: 0 bytes in 0 blocks
==207==    still reachable: 896 bytes in 18 blocks
==207==         suppressed: 0 bytes in 0 blocks
==207== Rerun with --leak-check=full to see details of leaked memory
==207== 
==207== For counts of detected and suppressed errors, rerun with: -v
==207== Use --track-origins=yes to see where uninitialised values come from
==207== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==212== Memcheck, a memory error detector
==212== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==212== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==212== Command: ./test-eval inp.5.txt
==212== Parent PID: 211
==212== 
==212== Use of uninitialised value of size 8
==212==    at 0x400C0D: print_hand (deck.c:8)
==212==    by 0x4025CD: describe_hand (test-eval.c:74)
==212==    by 0x4027AD: main (test-eval.c:116)
==212== 
==212== Invalid read of size 8
==212==    at 0x400C0D: print_hand (deck.c:8)
==212==    by 0x4025CD: describe_hand (test-eval.c:74)
==212==    by 0x4027AD: main (test-eval.c:116)
==212==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==212== 
==212== 
==212== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==212==  Access not within mapped region at address 0x0
==212==    at 0x400C0D: print_hand (deck.c:8)
==212==    by 0x4025CD: describe_hand (test-eval.c:74)
==212==    by 0x4027AD: main (test-eval.c:116)
==212==  If you believe this happened as a result of a stack
==212==  overflow in your program's main thread (unlikely but
==212==  possible), you can try to increase the size of the
==212==  main thread stack using the --main-stacksize= flag.
==212==  The main thread stack size used in this run was 8388608.
==212== 
==212== HEAP SUMMARY:
==212==     in use at exit: 864 bytes in 16 blocks
==212==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==212== 
==212== LEAK SUMMARY:
==212==    definitely lost: 0 bytes in 0 blocks
==212==    indirectly lost: 0 bytes in 0 blocks
==212==      possibly lost: 0 bytes in 0 blocks
==212==    still reachable: 864 bytes in 16 blocks
==212==         suppressed: 0 bytes in 0 blocks
==212== Rerun with --leak-check=full to see details of leaked memory
==212== 
==212== For counts of detected and suppressed errors, rerun with: -v
==212== Use --track-origins=yes to see where uninitialised values come from
==212== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==217== Memcheck, a memory error detector
==217== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==217== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==217== Command: ./test-eval inp.6.txt
==217== Parent PID: 216
==217== 
==217== Use of uninitialised value of size 8
==217==    at 0x400C0D: print_hand (deck.c:8)
==217==    by 0x4025CD: describe_hand (test-eval.c:74)
==217==    by 0x4027AD: main (test-eval.c:116)
==217== 
==217== Invalid read of size 8
==217==    at 0x400C0D: print_hand (deck.c:8)
==217==    by 0x4025CD: describe_hand (test-eval.c:74)
==217==    by 0x4027AD: main (test-eval.c:116)
==217==  Address 0x380512a0 is in the Text segment of /usr/lib/valgrind/memcheck-amd64-linux
==217==    at 0x380512A0: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==217== 
==217== 
==217== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==217==  Access not within mapped region at address 0x30000000C
==217==    at 0x400C0D: print_hand (deck.c:8)
==217==    by 0x4025CD: describe_hand (test-eval.c:74)
==217==    by 0x4027AD: main (test-eval.c:116)
==217==  If you believe this happened as a result of a stack
==217==  overflow in your program's main thread (unlikely but
==217==  possible), you can try to increase the size of the
==217==  main thread stack using the --main-stacksize= flag.
==217==  The main thread stack size used in this run was 8388608.
==217== 
==217== HEAP SUMMARY:
==217==     in use at exit: 928 bytes in 20 blocks
==217==   total heap usage: 218 allocs, 198 frees, 13,008 bytes allocated
==217== 
==217== LEAK SUMMARY:
==217==    definitely lost: 0 bytes in 0 blocks
==217==    indirectly lost: 0 bytes in 0 blocks
==217==      possibly lost: 0 bytes in 0 blocks
==217==    still reachable: 928 bytes in 20 blocks
==217==         suppressed: 0 bytes in 0 blocks
==217== Rerun with --leak-check=full to see details of leaked memory
==217== 
==217== For counts of detected and suppressed errors, rerun with: -v
==217== Use --track-origins=yes to see where uninitialised values come from
==217== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
 Checking the output 
Line_4_did_not_match
Line_8_did_not_match
Line_12_did_not_match
Line_16_did_not_match
Line_19_did_not_match
Line_24_did_not_match
Line_28_did_not_match
Line_32_did_not_match
Line_36_did_not_match
Line_44_did_not_match
Line_48_did_not_match
Line_52_did_not_match
Line_56_did_not_match
Line_64_did_not_match
Line_68_did_not_match
Line_72_did_not_match
Line_76_did_not_match
Line_84_did_not_match
Line_88_did_not_match
Line_92_did_not_match
Line_96_did_not_match
Line_104_did_not_match
Line_112_did_not_match
Line_116_did_not_match
Line_124_did_not_match
Line_132_did_not_match
Line_136_did_not_match
Line_144_did_not_match
Line_152_did_not_match
Line_164_did_not_match
Line_172_did_not_match
Line_184_did_not_match
Line_192_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
Kd Kh Ks 8d 7c 7h 2c 						Kd Kh Ks 8d 7c 7h 2c 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value K)	 - The most of a kind is 3 of a kind (at index 0 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 		      |	 - 5 cards used for hand: Kd Kh 8d 7c 7h 
Hand 2:								Hand 2:
--------							--------
Kd Kh Ks 9h 7c 7h 2h 						Kd Kh Ks 9h 7c 7h 2h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value K)	 - The most of a kind is 3 of a kind (at index 0 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 		      |	 - 5 cards used for hand: Kd Kh 9h 7c 7h 
Comparison : 							Comparison : 
--------------							--------------
Tie							      |	Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kd Kh Ks 8d 7c 7h 2c 						Kd Kh Ks 8d 7c 7h 2c 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value K)	 - The most of a kind is 3 of a kind (at index 0 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 		      |	 - 5 cards used for hand: Kd Kh 8d 7c 7h 
Hand 2:								Hand 2:
--------							--------
Qd Qh Qs 9h 7c 7h 2h 						Qd Qh Qs 9h 7c 7h 2h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Qd Qh Qs 7c 7h 		      |	 - 5 cards used for hand: Qd Qh 9h 7c 7h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kd Kh Ks 8d 7c 7h 2c 						Kd Kh Ks 8d 7c 7h 2c 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value K)	 - The most of a kind is 3 of a kind (at index 0 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 		      |	 - 5 cards used for hand: Kd Kh 8d 7c 7h 
Hand 2:								Hand 2:
--------							--------
Qd Qh Qs 9h 8c 8h 2h 						Qd Qh Qs 9h 8c 8h 2h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - Secondary pair at index 4 (value 8)				 - Secondary pair at index 4 (value 8)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Qd Qh Qs 8c 8h 		      |	 - 5 cards used for hand: Qd Qh 9h 8c 8h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kd Kh Ks 8d 7c 7h 2c 						Kd Kh Ks 8d 7c 7h 2c 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value K)	 - The most of a kind is 3 of a kind (at index 0 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 		      |	 - 5 cards used for hand: Kd Kh 8d 7c 7h 
Hand 2:								Hand 2:
--------							--------
Qd Qh Qs 9h 7c 7h 7s 						Qd Qh Qs 9h 7c 7h 7s 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Qd Qh Qs 7c 7h 		      |	 - 5 cards used for hand: Qd Qh 9h 7c 7h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kd Kh Ks 8d 7c 7h 						Kd Kh Ks 8d 7c 7h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value K)	 - The most of a kind is 3 of a kind (at index 0 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 		      |	 - 5 cards used for hand: Kd Kh 8d 7c 7h 
Hand 2:								Hand 2:
--------							--------
Qd Qh Qs 9h 8c 8h 						Qd Qh Qs 9h 8c 8h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - Secondary pair at index 4 (value 8)				 - Secondary pair at index 4 (value 8)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Qd Qh Qs 8c 8h 		      |	 - 5 cards used for hand: Qd Qh 9h 8c 8h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Kd Kh Ks 7c 7h 2c 						As Kd Kh Ks 7c 7h 2c 
 - No flush						      |	 - Flush in suit s
 - The most of a kind is 3 of a kind (at index 1 / value K)	 - The most of a kind is 3 of a kind (at index 1 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 			 - 5 cards used for hand: Kd Kh Ks 7c 7h 
Hand 2:								Hand 2:
--------							--------
Ad Ah As 8c 8d 8h 						Ad Ah As 8c 8d 8h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value A)	 - The most of a kind is 3 of a kind (at index 0 / value A)
 - Secondary pair at index 3 (value 8)				 - Secondary pair at index 3 (value 8)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Ad Ah As 8c 8d 		      |	 - 5 cards used for hand: Ad Ah 8c 8c 8d 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Kd Kh Ks 7c 7h 2c 						As Kd Kh Ks 7c 7h 2c 
 - No flush						      |	 - Flush in suit s
 - The most of a kind is 3 of a kind (at index 1 / value K)	 - The most of a kind is 3 of a kind (at index 1 / value K)
 - Secondary pair at index 4 (value 7)				 - Secondary pair at index 4 (value 7)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Kd Kh Ks 7c 7h 			 - 5 cards used for hand: Kd Kh Ks 7c 7h 
Hand 2:								Hand 2:
--------							--------
Ad Ah As 6c 6d 6h 						Ad Ah As 6c 6d 6h 
 - No flush						      |	 - Flush in suit d
 - The most of a kind is 3 of a kind (at index 0 / value A)	 - The most of a kind is 3 of a kind (at index 0 / value A)
 - Secondary pair at index 3 (value 6)				 - Secondary pair at index 3 (value 6)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: Ad Ah As 6c 6d 		      |	 - 5 cards used for hand: Ad Ah 6c 6c 6d 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kh Ks 8c 7c 7d 7h 						Kh Ks 8c 7c 7d 7h 
 - No flush						      |	 - Flush in suit h
 - The most of a kind is 3 of a kind (at index 3 / value 7)	 - The most of a kind is 3 of a kind (at index 3 / value 7)
 - Secondary pair at index 0 (value K)				 - Secondary pair at index 0 (value K)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: 7c 7d 7h Kh Ks 			 - 5 cards used for hand: 7c 7d 7h Kh Ks 
Hand 2:								Hand 2:
--------							--------
Kh Ks 9d 3c 3h 3s 2c 						Kh Ks 9d 3c 3h 3s 2c 
 - No flush						      |	 - Flush in suit h
 - The most of a kind is 3 of a kind (at index 3 / value 3)	 - The most of a kind is 3 of a kind (at index 3 / value 3)
 - Secondary pair at index 0 (value K)				 - Secondary pair at index 0 (value K)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: 3c 3h 3s Kh Ks 			 - 5 cards used for hand: 3c 3h 3s Kh Ks 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kh Ks 8c 7c 7d 7h 						Kh Ks 8c 7c 7d 7h 
 - No flush						      |	 - Flush in suit h
 - The most of a kind is 3 of a kind (at index 3 / value 7)	 - The most of a kind is 3 of a kind (at index 3 / value 7)
 - Secondary pair at index 0 (value K)				 - Secondary pair at index 0 (value K)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: 7c 7d 7h Kh Ks 			 - 5 cards used for hand: 7c 7d 7h Kh Ks 
Hand 2:								Hand 2:
--------							--------
Qh Qs 9d 3c 3h 3s 2c 						Qh Qs 9d 3c 3h 3s 2c 
 - No flush						      |	 - Flush in suit h
 - The most of a kind is 3 of a kind (at index 3 / value 3)	 - The most of a kind is 3 of a kind (at index 3 / value 3)
 - Secondary pair at index 0 (value Q)				 - Secondary pair at index 0 (value Q)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: 3c 3h 3s Qh Qs 			 - 5 cards used for hand: 3c 3h 3s Qh Qs 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kh Ks 8c 7c 7d 7h 						Kh Ks 8c 7c 7d 7h 
 - No flush						      |	 - Flush in suit h
 - The most of a kind is 3 of a kind (at index 3 / value 7)	 - The most of a kind is 3 of a kind (at index 3 / value 7)
 - Secondary pair at index 0 (value K)				 - Secondary pair at index 0 (value K)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: 7c 7d 7h Kh Ks 			 - 5 cards used for hand: 7c 7d 7h Kh Ks 
Hand 2:								Hand 2:
--------							--------
Jh Js 9d 7c 7h 7s 2c 						Jh Js 9d 7c 7h 7s 2c 
 - No flush						      |	 - Flush in suit h
 - The most of a kind is 3 of a kind (at index 3 / value 7)	 - The most of a kind is 3 of a kind (at index 3 / value 7)
 - Secondary pair at index 0 (value J)				 - Secondary pair at index 0 (value J)
 - evaluate_hand's ranking: FULL_HOUSE				 - evaluate_hand's ranking: FULL_HOUSE
 - 5 cards used for hand: 7c 7h 7s Jh Js 			 - 5 cards used for hand: 7c 7h 7s Jh Js 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==235== Memcheck, a memory error detector
==235== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==235== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==235== Command: ./test-eval inp.8.txt
==235== Parent PID: 234
==235== 
==235== Use of uninitialised value of size 8
==235==    at 0x400C0D: print_hand (deck.c:8)
==235==    by 0x4025CD: describe_hand (test-eval.c:74)
==235==    by 0x4027AD: main (test-eval.c:116)
==235== 
==235== Invalid read of size 8
==235==    at 0x400C0D: print_hand (deck.c:8)
==235==    by 0x4025CD: describe_hand (test-eval.c:74)
==235==    by 0x4027AD: main (test-eval.c:116)
==235==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==235== 
==235== 
==235== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==235==  Access not within mapped region at address 0x0
==235==    at 0x400C0D: print_hand (deck.c:8)
==235==    by 0x4025CD: describe_hand (test-eval.c:74)
==235==    by 0x4027AD: main (test-eval.c:116)
==235==  If you believe this happened as a result of a stack
==235==  overflow in your program's main thread (unlikely but
==235==  possible), you can try to increase the size of the
==235==  main thread stack using the --main-stacksize= flag.
==235==  The main thread stack size used in this run was 8388608.
==235== 
==235== HEAP SUMMARY:
==235==     in use at exit: 896 bytes in 18 blocks
==235==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==235== 
==235== LEAK SUMMARY:
==235==    definitely lost: 0 bytes in 0 blocks
==235==    indirectly lost: 0 bytes in 0 blocks
==235==      possibly lost: 0 bytes in 0 blocks
==235==    still reachable: 896 bytes in 18 blocks
==235==         suppressed: 0 bytes in 0 blocks
==235== Rerun with --leak-check=full to see details of leaked memory
==235== 
==235== For counts of detected and suppressed errors, rerun with: -v
==235== Use --track-origins=yes to see where uninitialised values come from
==235== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==240== Memcheck, a memory error detector
==240== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==240== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==240== Command: ./test-eval inp.9.txt
==240== Parent PID: 239
==240== 
==240== Use of uninitialised value of size 8
==240==    at 0x400C0D: print_hand (deck.c:8)
==240==    by 0x4025CD: describe_hand (test-eval.c:74)
==240==    by 0x4027AD: main (test-eval.c:116)
==240== 
==240== Invalid read of size 8
==240==    at 0x400C0D: print_hand (deck.c:8)
==240==    by 0x4025CD: describe_hand (test-eval.c:74)
==240==    by 0x4027AD: main (test-eval.c:116)
==240==  Address 0x380512a0 is in the Text segment of /usr/lib/valgrind/memcheck-amd64-linux
==240==    at 0x380512A0: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==240== 
==240== 
==240== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==240==  Access not within mapped region at address 0x30000000D
==240==    at 0x400C0D: print_hand (deck.c:8)
==240==    by 0x4025CD: describe_hand (test-eval.c:74)
==240==    by 0x4027AD: main (test-eval.c:116)
==240==  If you believe this happened as a result of a stack
==240==  overflow in your program's main thread (unlikely but
==240==  possible), you can try to increase the size of the
==240==  main thread stack using the --main-stacksize= flag.
==240==  The main thread stack size used in this run was 8388608.
==240== 
==240== HEAP SUMMARY:
==240==     in use at exit: 928 bytes in 20 blocks
==240==   total heap usage: 152 allocs, 132 frees, 11,688 bytes allocated
==240== 
==240== LEAK SUMMARY:
==240==    definitely lost: 0 bytes in 0 blocks
==240==    indirectly lost: 0 bytes in 0 blocks
==240==      possibly lost: 0 bytes in 0 blocks
==240==    still reachable: 928 bytes in 20 blocks
==240==         suppressed: 0 bytes in 0 blocks
==240== Rerun with --leak-check=full to see details of leaked memory
==240== 
==240== For counts of detected and suppressed errors, rerun with: -v
==240== Use --track-origins=yes to see where uninitialised values come from
==240== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==245== Memcheck, a memory error detector
==245== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==245== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==245== Command: ./test-eval inp.10.txt
==245== Parent PID: 244
==245== 
==245== Use of uninitialised value of size 8
==245==    at 0x400C0D: print_hand (deck.c:8)
==245==    by 0x4025CD: describe_hand (test-eval.c:74)
==245==    by 0x4027CD: main (test-eval.c:119)
==245== 
==245== Invalid read of size 8
==245==    at 0x400C0D: print_hand (deck.c:8)
==245==    by 0x4025CD: describe_hand (test-eval.c:74)
==245==    by 0x4027CD: main (test-eval.c:119)
==245==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==245== 
==245== 
==245== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==245==  Access not within mapped region at address 0x0
==245==    at 0x400C0D: print_hand (deck.c:8)
==245==    by 0x4025CD: describe_hand (test-eval.c:74)
==245==    by 0x4027CD: main (test-eval.c:119)
==245==  If you believe this happened as a result of a stack
==245==  overflow in your program's main thread (unlikely but
==245==  possible), you can try to increase the size of the
==245==  main thread stack using the --main-stacksize= flag.
==245==  The main thread stack size used in this run was 8388608.
==245== 
==245== HEAP SUMMARY:
==245==     in use at exit: 896 bytes in 18 blocks
==245==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==245== 
==245== LEAK SUMMARY:
==245==    definitely lost: 0 bytes in 0 blocks
==245==    indirectly lost: 0 bytes in 0 blocks
==245==      possibly lost: 0 bytes in 0 blocks
==245==    still reachable: 896 bytes in 18 blocks
==245==         suppressed: 0 bytes in 0 blocks
==245== Rerun with --leak-check=full to see details of leaked memory
==245== 
==245== For counts of detected and suppressed errors, rerun with: -v
==245== Use --track-origins=yes to see where uninitialised values come from
==245== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
