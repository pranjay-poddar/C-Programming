Grading at Thu Aug  1 13:22:27 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1386== Memcheck, a memory error detector
==1386== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1386== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1386== Command: ./tester h.txt d.txt
==1386== Parent PID: 1385
==1386== 
==1386== Use of uninitialised value of size 8
==1386==    at 0x400DD5: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x400BF4: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x400CE2: read_input (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x401A35: main (test-input.c:69)
==1386== 
==1386== Invalid write of size 8
==1386==    at 0x400DD5: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x400BF4: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x400CE2: read_input (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x401A35: main (test-input.c:69)
==1386==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1386== 
==1386== 
==1386== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1386==  Access not within mapped region at address 0x0
==1386==    at 0x400DD5: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x400BF4: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x400CE2: read_input (in /graderhome/work/c4prj2_input/tester)
==1386==    by 0x401A35: main (test-input.c:69)
==1386==  If you believe this happened as a result of a stack
==1386==  overflow in your program's main thread (unlikely but
==1386==  possible), you can try to increase the size of the
==1386==  main thread stack using the --main-stacksize= flag.
==1386==  The main thread stack size used in this run was 8388608.
==1386== 
==1386== HEAP SUMMARY:
==1386==     in use at exit: 824 bytes in 13 blocks
==1386==   total heap usage: 20 allocs, 7 frees, 5,088 bytes allocated
==1386== 
==1386== LEAK SUMMARY:
==1386==    definitely lost: 0 bytes in 0 blocks
==1386==    indirectly lost: 0 bytes in 0 blocks
==1386==      possibly lost: 0 bytes in 0 blocks
==1386==    still reachable: 824 bytes in 13 blocks
==1386==         suppressed: 0 bytes in 0 blocks
==1386== Rerun with --leak-check=full to see details of leaked memory
==1386== 
==1386== For counts of detected and suppressed errors, rerun with: -v
==1386== Use --track-origins=yes to see where uninitialised values come from
==1386== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1392== Memcheck, a memory error detector
==1392== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1392== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1392== Command: ./tester i1 i2
==1392== Parent PID: 1391
==1392== 
==1392== Use of uninitialised value of size 8
==1392==    at 0x400DD5: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x400BF4: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x400CE2: read_input (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x401A35: main (test-input.c:69)
==1392== 
==1392== Invalid write of size 8
==1392==    at 0x400DD5: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x400BF4: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x400CE2: read_input (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x401A35: main (test-input.c:69)
==1392==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1392== 
==1392== 
==1392== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1392==  Access not within mapped region at address 0x0
==1392==    at 0x400DD5: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x400BF4: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x400CE2: read_input (in /graderhome/work/c4prj2_input/tester)
==1392==    by 0x401A35: main (test-input.c:69)
==1392==  If you believe this happened as a result of a stack
==1392==  overflow in your program's main thread (unlikely but
==1392==  possible), you can try to increase the size of the
==1392==  main thread stack using the --main-stacksize= flag.
==1392==  The main thread stack size used in this run was 8388608.
==1392== 
==1392== HEAP SUMMARY:
==1392==     in use at exit: 776 bytes in 10 blocks
==1392==   total heap usage: 14 allocs, 4 frees, 4,920 bytes allocated
==1392== 
==1392== LEAK SUMMARY:
==1392==    definitely lost: 0 bytes in 0 blocks
==1392==    indirectly lost: 0 bytes in 0 blocks
==1392==      possibly lost: 0 bytes in 0 blocks
==1392==    still reachable: 776 bytes in 10 blocks
==1392==         suppressed: 0 bytes in 0 blocks
==1392== Rerun with --leak-check=full to see details of leaked memory
==1392== 
==1392== For counts of detected and suppressed errors, rerun with: -v
==1392== Use --track-origins=yes to see where uninitialised values come from
==1392== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
